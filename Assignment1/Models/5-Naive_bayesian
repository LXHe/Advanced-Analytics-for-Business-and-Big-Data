import pandas as pd
import numpy as np
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import roc_auc_score
from sklearn.naive_bayes import GaussianNB

train_path = r'.\telco_train.csv'
test_path = r'.\telco_test.csv'
train_data = pd.read_csv(train_path)
test_data = pd.read_csv(test_path)

#%%
train_data['Current_date'] = '2013-10-31' 
test_data['Current_date'] = '2013-10-31'
train_data[['START_DATE', 'Current_date']] = train_data[['START_DATE', 'Current_date']].astype('datetime64[ns]') 
test_data[['START_DATE', 'Current_date']] = test_data[['START_DATE', 'Current_date']].astype('datetime64[ns]')

train_data['Active_days'] = (train_data['Current_date'] - train_data['START_DATE']).dt.days
test_data['Active_days'] = (test_data['Current_date'] - test_data['START_DATE']).dt.days

#%%
features_total = train_data.columns.values.tolist()
features_drop = ['ID', 'CHURN', 'START_DATE', 'Current_date', 'FIN_STATE',
    'AVG_DATA_3MONTH', 'COUNT_CONNECTIONS_3MONTH', 'AVG_DATA_1MONTH']
features_used = list(set(features_total) - set(features_drop))

#%%
# Build preprocessing pipeline
class DataFrameSelector(BaseEstimator, TransformerMixin):
    '''
    Select and preprocess features from dataframe
    '''
    def __init__(self, feature_name):
        self.feature_name = feature_name
    
    def fit(self, df, y=None):
        return self
    
    def transform(self, df):
        return df[self.feature_name].values

# Drop binary feature 'PREPAID'    
num_feats = features_used.copy()
num_feats.remove('PREPAID')

# MinMaxScaler
num_feats_pipeline = Pipeline([
    ('num_feats_selector', DataFrameSelector(num_feats)),
    ('scaler', MinMaxScaler())
])
    
train_data_num = num_feats_pipeline.fit_transform(train_data)
test_data_num = num_feats_pipeline.transform(test_data)

# Stack standardized numeric features and binary features
X_train = np.hstack((train_data_num, train_data[['PREPAID']].values))
X_test = np.hstack((test_data_num, test_data[['PREPAID']].values))

# Creat target values
y_train = train_data['CHURN'].values

#%%
# Naive Bayes makes very strong independence assumptions
# Therefore features that are used should have small correlation
nb = GaussianNB()
nb.fit(X_train, y_train)
y_train_pred = nb.predict_proba(X_train)[:, 1]
score = roc_auc_score(y_train, y_train_pred)
# this gives a auc of 0.7320617837731392
